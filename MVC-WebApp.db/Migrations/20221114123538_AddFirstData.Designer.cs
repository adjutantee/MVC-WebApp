// <auto-generated />
using System;
using MVC_WebApp.db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MVC_WebApp.db.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    [Migration("20221114123538_AddFirstData")]
    partial class AddFirstData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MVC_WebApp.db.Models.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("MVC_WebApp.db.Models.CartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<Guid?>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("MVC_WebApp.db.Models.FavouriteProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("FavoriteProducts");
                });

            modelBuilder.Entity("MVC_WebApp.db.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Time")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserDeliveryInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserDeliveryInfoId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("MVC_WebApp.db.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("582ed83d-ccc0-4681-9e0c-4f85fd64f996"),
                            Cost = 15000m,
                            Description = "Кроссовки фирмы Nike",
                            ImagePath = "/css/PHTTest.png",
                            Name = "Name1"
                        },
                        new
                        {
                            Id = new Guid("dd1f943b-141e-44c7-a02d-872a6c3c7e53"),
                            Cost = 11000m,
                            Description = "Кроссовки фирмы Nike",
                            ImagePath = "/css/PHTTest.png",
                            Name = "Name2"
                        },
                        new
                        {
                            Id = new Guid("56dd4601-3d58-44a4-b9e2-d3e9131c436b"),
                            Cost = 17000m,
                            Description = "Кроссовки фирмы Nike",
                            ImagePath = "/css/PHTTest.png",
                            Name = "Name3"
                        });
                });

            modelBuilder.Entity("MVC_WebApp.db.Models.UserDeliveryInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("userAdres")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userOrderEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userOrderMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userOrderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userOrderPhone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserDeliveryInfo");
                });

            modelBuilder.Entity("MVC_WebApp.db.Models.CartItem", b =>
                {
                    b.HasOne("MVC_WebApp.db.Models.Cart", "Cart")
                        .WithMany("Items")
                        .HasForeignKey("CartId");

                    b.HasOne("MVC_WebApp.db.Models.Order", null)
                        .WithMany("Items")
                        .HasForeignKey("OrderId");

                    b.HasOne("MVC_WebApp.db.Models.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId");

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MVC_WebApp.db.Models.FavouriteProduct", b =>
                {
                    b.HasOne("MVC_WebApp.db.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MVC_WebApp.db.Models.Order", b =>
                {
                    b.HasOne("MVC_WebApp.db.Models.UserDeliveryInfo", "UserDeliveryInfo")
                        .WithMany()
                        .HasForeignKey("UserDeliveryInfoId");

                    b.Navigation("UserDeliveryInfo");
                });

            modelBuilder.Entity("MVC_WebApp.db.Models.Cart", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("MVC_WebApp.db.Models.Order", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("MVC_WebApp.db.Models.Product", b =>
                {
                    b.Navigation("CartItems");
                });
#pragma warning restore 612, 618
        }
    }
}
